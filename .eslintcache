[{"C:\\Users\\rromi\\sensors-data\\src\\index.js":"1","C:\\Users\\rromi\\sensors-data\\src\\App.js":"2","C:\\Users\\rromi\\sensors-data\\src\\components\\Map\\index.js":"3","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\index.js":"4","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\index.js":"5","C:\\Users\\rromi\\sensors-data\\src\\components\\SensorsPanel\\index.js":"6","C:\\Users\\rromi\\sensors-data\\src\\components\\RequestEmailForm\\index.js":"7","C:\\Users\\rromi\\sensors-data\\src\\api\\index.js":"8","C:\\Users\\rromi\\sensors-data\\src\\helpers\\index.js":"9","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\sandbox.js":"10","C:\\Users\\rromi\\sensors-data\\src\\components\\Loader\\index.js":"11","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Figure\\index.js":"12","C:\\Users\\rromi\\sensors-data\\src\\components\\App\\index.js":"13","C:\\Users\\rromi\\sensors-data\\src\\images\\Graph.js":"14","C:\\Users\\rromi\\sensors-data\\src\\images\\Cursor.js":"15","C:\\Users\\rromi\\sensors-data\\src\\images\\Sensor.js":"16","C:\\Users\\rromi\\sensors-data\\src\\sensors\\Geolocation.js":"17","C:\\Users\\rromi\\sensors-data\\src\\sensors\\geolocation.js":"18","C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceMotion.js":"19","C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceOrientation.js":"20"},{"size":314,"mtime":1611367014504,"results":"21","hashOfConfig":"22"},{"size":1649,"mtime":1611661612386,"results":"23","hashOfConfig":"22"},{"size":1368,"mtime":1611664072428,"results":"24","hashOfConfig":"22"},{"size":2137,"mtime":1611663937827,"results":"25","hashOfConfig":"22"},{"size":1113,"mtime":1611659948524,"results":"26","hashOfConfig":"22"},{"size":9086,"mtime":1611664033993,"results":"27","hashOfConfig":"22"},{"size":2583,"mtime":1611616618366,"results":"28","hashOfConfig":"22"},{"size":726,"mtime":1611606500578,"results":"29","hashOfConfig":"22"},{"size":636,"mtime":1611531862271,"results":"30","hashOfConfig":"22"},{"size":1676,"mtime":1611659829935,"results":"31","hashOfConfig":"22"},{"size":272,"mtime":1611503847509,"results":"32","hashOfConfig":"22"},{"size":743,"mtime":1611662147204,"results":"33","hashOfConfig":"22"},{"size":3124,"mtime":1611659440622,"results":"34","hashOfConfig":"22"},{"size":616,"mtime":1611521354849,"results":"35","hashOfConfig":"22"},{"size":709,"mtime":1611534163203,"results":"36","hashOfConfig":"22"},{"size":2363,"mtime":1611613504968,"results":"37","hashOfConfig":"22"},{"size":800,"mtime":1611620290365,"results":"38","hashOfConfig":"22"},{"size":910,"mtime":1611662290032,"results":"39","hashOfConfig":"22"},{"size":729,"mtime":1611619862712,"results":"40","hashOfConfig":"22"},{"size":197,"mtime":1611620099560,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"vczyyt",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\rromi\\sensors-data\\src\\index.js",[],["87","88"],"C:\\Users\\rromi\\sensors-data\\src\\App.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Map\\index.js",["89"],"import React, { useEffect } from \"react\";\r\nimport ReactMapboxGl, { Marker } from \"react-mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { withTheme } from \"styled-components\";\r\nimport { getCookie } from \"helpers\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: process.env.REACT_APP_MAP_ACCESS_TOKEN,\r\n});\r\n\r\nconst UserMarker = ({ color }) => {\r\n  return (\r\n    <div\r\n      className=\"pulsating-circle\"\r\n      style={{\r\n        pointerEvents: \"none\",\r\n        width: 30,\r\n        height: 30,\r\n        borderRadius: \"50%\",\r\n        border: \"4px solid white\",\r\n        background: color,\r\n        boxShadow: `0 0 0 1px ${color}`,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nconst Component = ({ onReady, theme, userLocation }) => {\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    if (!getCookie(\"secure-sensors-cookie\")) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n  return (\r\n    <Map\r\n      onStyleLoad={onReady}\r\n      style=\"mapbox://styles/mapbox/streets-v9\"\r\n      center={userLocation}\r\n      containerStyle={{\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Marker coordinates={userLocation} style={{ pointerEvents: \"none\" }}>\r\n        <UserMarker color={theme.danger}></UserMarker>\r\n      </Marker>\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default withTheme(Component);\r\n","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\index.js",["90"],"import React from \"react\";\r\nimport RealTimeChart from \"./Chart\";\r\nimport Figure from \"./Figure\";\r\nimport styled, { withTheme } from \"styled-components\";\r\n\r\nconst Title = styled.div`\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n  line-height: 24px;\r\n  color: ${(props) => props.theme.main};\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst colors = [\r\n  \"deeppink\",\r\n  \"deepskyblue\",\r\n  \"rebeccapurple\",\r\n  \"chocolate\",\r\n  \"orange\",\r\n  \"seagreen\",\r\n  \"slateblue\",\r\n  \"lawngreen\",\r\n];\r\n\r\nconst markStyle = (color) => {\r\n  return { width: 20, height: 7, borderRadius: 5, background: color, marginRight: 5 };\r\n};\r\n\r\nconst Sensor = ({\r\n  value,\r\n  characterValue,\r\n  subject,\r\n  units,\r\n  range,\r\n  sendSensorData,\r\n  id,\r\n  graphView,\r\n  labels = [\"X-axis\", \"Y-axis\", \"Z-axis\"],\r\n  active,\r\n  keys,\r\n  theme,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        boxSizing: \"border-box\",\r\n        background: \"white\",\r\n        padding: \"1.5rem\",\r\n        borderRadius: \"8px\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Title>{subject}</Title>\r\n      {graphView && (\r\n        <div style={{ display: \"flex\", marginBottom: 15, marginTop: 25, flexWrap: \"wrap\" }}>\r\n          {keys.map((x, i) => (\r\n            <div\r\n              key={`${subject}-chart-label-${i}`}\r\n              style={{ display: \"flex\", alignItems: \"center\", marginRight: 5, marginBottom: 5 }}\r\n            >\r\n              <div style={markStyle(theme.chartColors[i])}></div>\r\n              <div style={{ marginRight: 4, lineHeight: \"14px\" }}>{x}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {graphView ? (\r\n        <RealTimeChart\r\n          id={id}\r\n          sendSensorData={sendSensorData}\r\n          value={value}\r\n          range={range}\r\n          subject={subject}\r\n          active={active}\r\n          keys={keys}\r\n          theme={theme}\r\n        ></RealTimeChart>\r\n      ) : (\r\n        <Figure value={value} labels={labels} units={units} subject={subject}></Figure>\r\n      )}\r\n      {/* <Figure value={characterValue} labels={labels} units={units} subject={subject}></Figure> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withTheme(Sensor);\r\n","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\SensorsPanel\\index.js",["91","92","93","94","95","96","97"],"import React, { useCallback, useState, useRef, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Sensor from \"components/Sensor\";\r\nimport { SendSensorData } from \"api\";\r\nimport { Container, Row, Col } from \"styled-bootstrap-grid\";\r\nimport styled, { withTheme } from \"styled-components\";\r\nimport SensorIcon from \"images/Sensor\";\r\nimport { onDeviceMotion } from \"sensors/deviceMotion\";\r\nimport { onDeviceOrientation } from \"sensors/deviceOrientation\";\r\nimport { SubscribeGeolocation, UnsubscribeGeolocation } from \"sensors/geolocation\";\r\n\r\nconst SwitchButton = styled.div`\r\n  height: 33px;\r\n  width: 48px;\r\n  border-radius: 5px;\r\n  border: 1px solid ${(props) => props.theme.main};\r\n  background: ${(props) =>\r\n    props.active ? (props.theme.main ? props.theme.main : \"black\") : \"white\"};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst SensorsButton = ({\r\n  sensorsOn,\r\n  TurnSensorsOn,\r\n  TurnSensorsOff,\r\n  theme,\r\n  sensorsButtonRenderedOnce,\r\n  setSensorsButtonRenderedOnce,\r\n}) => {\r\n  const TurnOnOffButtonRef = useRef();\r\n  useEffect(() => {\r\n    if (!sensorsButtonRenderedOnce) {\r\n      TurnOnOffButtonRef.current.click();\r\n      setSensorsButtonRenderedOnce(true);\r\n    }\r\n  }, []);\r\n  return (\r\n    <SwitchButton\r\n      theme={theme}\r\n      ref={TurnOnOffButtonRef}\r\n      active={sensorsOn}\r\n      onClick={() => {\r\n        sensorsOn ? TurnSensorsOff() : TurnSensorsOn();\r\n      }}\r\n    >\r\n      <SensorIcon color={sensorsOn ? theme.secondary : theme.main}></SensorIcon>\r\n    </SwitchButton>\r\n  );\r\n};\r\n\r\nconst SensorsPanel = ({ graphView, sensorsOn, setSensorsOn, theme }) => {\r\n  const [orientation, setOrientation] = useState({ alpha: 0, beta: 0, gamma: 0 });\r\n  const [acceleration, setAcceleration] = useState({ x: 0, y: 0, z: 0 });\r\n  const [accelerationIncludingGravity, setAccelerationIncludingGravity] = useState({\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n  });\r\n  const [rotationRate, setRotationRate] = useState({ alpha: 0, beta: 0, gamma: 0 });\r\n  const [geoData, setGeoData] = useState({\r\n    latitude: 0,\r\n    longitude: 0,\r\n    accuracy: 0,\r\n    altitude: 0,\r\n    altitudeAccuracy: 0,\r\n    heading: 0,\r\n    speed: 0,\r\n  });\r\n\r\n  const [location, setLocaton] = useState({ country: \"\", city: \"\", state: \"\" });\r\n\r\n  const [sensorsButtonRenderedOnce, setSensorsButtonRenderedOnce] = useState(false);\r\n\r\n  const onDeviceMotionAssigned = useCallback(\r\n    (e) => {\r\n      onDeviceMotion(e, { setAcceleration, setAccelerationIncludingGravity, setRotationRate });\r\n    },\r\n    [onDeviceMotion]\r\n  );\r\n\r\n  const onDeviceOrientationAssigned = useCallback(\r\n    (e) => {\r\n      onDeviceOrientation(e, { setOrientation });\r\n    },\r\n    [onDeviceOrientation]\r\n  );\r\n\r\n  const TurnSensorsOn = useCallback(() => {\r\n    var ua = navigator.userAgent.toLowerCase();\r\n    if (ua.indexOf(\"safari\") !== -1) {\r\n      if (ua.indexOf(\"chrome\") > -1) {\r\n        window.addEventListener(\"devicemotion\", onDeviceMotionAssigned);\r\n        window.addEventListener(\"deviceorientation\", onDeviceOrientationAssigned);\r\n      } else {\r\n        if (\r\n          typeof DeviceMotionEvent !== \"undefined\" &&\r\n          typeof DeviceMotionEvent.requestPermission === \"function\"\r\n        ) {\r\n          DeviceMotionEvent.requestPermission()\r\n            .then((response) => {\r\n              if (response === \"granted\") {\r\n                window.addEventListener(\"devicemotion\", onDeviceMotionAssigned);\r\n              }\r\n            })\r\n            .catch((er) => console.log(\"Request permission error\", er));\r\n        } else {\r\n          alert(\"DeviceMotionEvent is not defined\");\r\n        }\r\n        if (\r\n          typeof DeviceOrientationEvent !== \"undefined\" &&\r\n          typeof DeviceOrientationEvent.requestPermission === \"function\"\r\n        ) {\r\n          DeviceOrientationEvent.requestPermission()\r\n            .then((response) => {\r\n              if (response === \"granted\") {\r\n                window.addEventListener(\"deviceorientation\", onDeviceOrientationAssigned);\r\n              }\r\n            })\r\n            .catch((er) => console.log(\"Request permission error\", er));\r\n        } else {\r\n          alert(\"DeviceOrientationEvent is not defined\");\r\n        }\r\n      }\r\n    }\r\n    SubscribeGeolocation(\"geoData\", (val) => {\r\n      setGeoData((prev) =>\r\n        Object.assign({}, prev, {\r\n          latitude: val.latitude || 0,\r\n          longitude: val.longitude || 0,\r\n          accuracy: val.accuracy || 0,\r\n          altitude: val.altitude || 0,\r\n          altitudeAccuracy: val.altitudeAccuracy || 0,\r\n          heading: val.heading || 0,\r\n          speed: val.speed || 0,\r\n        })\r\n      );\r\n    });\r\n    setSensorsOn(true);\r\n  }, [onDeviceOrientationAssigned, onDeviceMotionAssigned]);\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  const TurnSensorsOff = useCallback(() => {\r\n    window.removeEventListener(\"deviceorientation\", onDeviceOrientationAssigned);\r\n    window.removeEventListener(\"devicemotion\", onDeviceMotionAssigned);\r\n    UnsubscribeGeolocation(\"geoData\");\r\n    setSensorsOn(false);\r\n  }, [onDeviceOrientation, onDeviceMotion]);\r\n\r\n  useEffect(() => {\r\n    ReactDOM.render(\r\n      <SensorsButton\r\n        sensorsButtonRenderedOnce={sensorsButtonRenderedOnce}\r\n        setSensorsButtonRenderedOnce={setSensorsButtonRenderedOnce}\r\n        theme={theme}\r\n        sensorsOn={sensorsOn}\r\n        TurnSensorsOff={TurnSensorsOff}\r\n        TurnSensorsOn={TurnSensorsOn}\r\n      ></SensorsButton>,\r\n      document.getElementById(\"sensors-button\")\r\n    );\r\n  }, [sensorsOn, TurnSensorsOn, TurnSensorsOff, sensorsButtonRenderedOnce, theme]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      fetch(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=${process.env.REACT_APP_GOOGLE_API_KEY}`\r\n      );\r\n    };\r\n    getData();\r\n  }, [geoData]);\r\n\r\n  return (\r\n    <Container style={{ width: \"100%\", maxWidth: 1000, padding: \"10px 0 50px 0\" }}>\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            labels={[\"X-axis (β)\", \"Y-axis (γ)\", \"Z-axis (α)\"]}\r\n            graphView={graphView}\r\n            id=\"orientation\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-200, 380]}\r\n            units={\"°\"}\r\n            subject=\"Orientation\"\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n            value={{ x: orientation.beta, y: orientation.gamma, z: orientation.alpha }}\r\n          ></Sensor>\r\n        </Col>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"accelerometer\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-10, 10]}\r\n            subject=\"Accelerometer\"\r\n            value={acceleration}\r\n            units=\"m/s²\"\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n          ></Sensor>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"accelerometerIncludingGravity\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-30, 30]}\r\n            subject=\"Accelerometer including gravity\"\r\n            value={accelerationIncludingGravity}\r\n            units=\"m/s²\"\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n          ></Sensor>\r\n        </Col>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"gyroscope\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-220, 220]}\r\n            subject=\"Gyroscope\"\r\n            value={{ x: rotationRate.beta, y: rotationRate.gamma, z: rotationRate.alpha }}\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n          ></Sensor>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"geodata\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-30, 30]}\r\n            subject=\"Geodata\"\r\n            value={geoData}\r\n            keys={[\r\n              \"latitude\",\r\n              \"longitude\",\r\n              \"accuracy\",\r\n              \"altitude\",\r\n              \"altitude accuracy\",\r\n              \"heading\",\r\n              \"speed\",\r\n            ]}\r\n            labels={[\r\n              \"latitude\",\r\n              \"longitude\",\r\n              \"accuracy\",\r\n              \"altitude\",\r\n              \"altitude accuracy\",\r\n              \"heading\",\r\n              \"speed\",\r\n            ]}\r\n          ></Sensor>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTheme(SensorsPanel);\r\n","C:\\Users\\rromi\\sensors-data\\src\\components\\RequestEmailForm\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\api\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\helpers\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\sandbox.js",[],["98","99"],"C:\\Users\\rromi\\sensors-data\\src\\components\\Loader\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Figure\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\App\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Graph.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Cursor.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Sensor.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\Geolocation.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\geolocation.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceMotion.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceOrientation.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":39,"column":7,"nodeType":"106","endLine":39,"endColumn":48},{"ruleId":"107","severity":1,"message":"108","line":14,"column":7,"nodeType":"109","messageId":"110","endLine":14,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":40,"column":6,"nodeType":"113","endLine":40,"endColumn":8,"suggestions":"114"},{"ruleId":"107","severity":1,"message":"115","line":74,"column":10,"nodeType":"109","messageId":"110","endLine":74,"endColumn":18},{"ruleId":"107","severity":1,"message":"116","line":74,"column":20,"nodeType":"109","messageId":"110","endLine":74,"endColumn":30},{"ruleId":"111","severity":1,"message":"117","line":82,"column":5,"nodeType":"113","endLine":82,"endColumn":21,"suggestions":"118"},{"ruleId":"111","severity":1,"message":"119","line":89,"column":5,"nodeType":"113","endLine":89,"endColumn":26,"suggestions":"120"},{"ruleId":"111","severity":1,"message":"121","line":143,"column":6,"nodeType":"113","endLine":143,"endColumn":59,"suggestions":"122"},{"ruleId":"111","severity":1,"message":"123","line":152,"column":6,"nodeType":"113","endLine":152,"endColumn":43,"suggestions":"124"},{"ruleId":"100","replacedBy":"125"},{"ruleId":"102","replacedBy":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","no-unused-vars","'colors' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sensorsButtonRenderedOnce' and 'setSensorsButtonRenderedOnce'. Either include them or remove the dependency array. If 'setSensorsButtonRenderedOnce' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["129"],"'location' is assigned a value but never used.","'setLocaton' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'onDeviceMotion'. Either exclude it or remove the dependency array. Outer scope values like 'onDeviceMotion' aren't valid dependencies because mutating them doesn't re-render the component.",["130"],"React Hook useCallback has an unnecessary dependency: 'onDeviceOrientation'. Either exclude it or remove the dependency array. Outer scope values like 'onDeviceOrientation' aren't valid dependencies because mutating them doesn't re-render the component.",["131"],"React Hook useCallback has a missing dependency: 'setSensorsOn'. Either include it or remove the dependency array. If 'setSensorsOn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"React Hook useCallback has missing dependencies: 'onDeviceMotionAssigned', 'onDeviceOrientationAssigned', and 'setSensorsOn'. Either include them or remove the dependency array. Outer scope values like 'onDeviceOrientation' aren't valid dependencies because mutating them doesn't re-render the component.",["133"],["127"],["128"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"136","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [sensorsButtonRenderedOnce, setSensorsButtonRenderedOnce]",{"range":"143","text":"144"},"Update the dependencies array to be: []",{"range":"145","text":"146"},{"range":"147","text":"146"},"Update the dependencies array to be: [setSensorsOn, onDeviceMotionAssigned, onDeviceOrientationAssigned]",{"range":"148","text":"149"},"Update the dependencies array to be: [onDeviceOrientationAssigned, onDeviceMotionAssigned, setSensorsOn]",{"range":"150","text":"151"},[1284,1286],"[sensorsButtonRenderedOnce, setSensorsButtonRenderedOnce]",[2585,2601],"[]",[2740,2761],[4731,4784],"[setSensorsOn, onDeviceMotionAssigned, onDeviceOrientationAssigned]",[5124,5161],"[onDeviceOrientationAssigned, onDeviceMotionAssigned, setSensorsOn]"]