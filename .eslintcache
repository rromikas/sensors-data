[{"C:\\Users\\rromi\\sensors-data\\src\\index.js":"1","C:\\Users\\rromi\\sensors-data\\src\\App.js":"2","C:\\Users\\rromi\\sensors-data\\src\\components\\Map\\index.js":"3","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\index.js":"4","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\index.js":"5","C:\\Users\\rromi\\sensors-data\\src\\components\\SensorsPanel\\index.js":"6","C:\\Users\\rromi\\sensors-data\\src\\components\\RequestEmailForm\\index.js":"7","C:\\Users\\rromi\\sensors-data\\src\\api\\index.js":"8","C:\\Users\\rromi\\sensors-data\\src\\helpers\\index.js":"9","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\sandbox.js":"10","C:\\Users\\rromi\\sensors-data\\src\\components\\Loader\\index.js":"11","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Figure\\index.js":"12","C:\\Users\\rromi\\sensors-data\\src\\components\\App\\index.js":"13","C:\\Users\\rromi\\sensors-data\\src\\images\\Graph.js":"14","C:\\Users\\rromi\\sensors-data\\src\\images\\Cursor.js":"15","C:\\Users\\rromi\\sensors-data\\src\\images\\Sensor.js":"16","C:\\Users\\rromi\\sensors-data\\src\\sensors\\Geolocation.js":"17","C:\\Users\\rromi\\sensors-data\\src\\sensors\\geolocation.js":"18","C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceMotion.js":"19","C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceOrientation.js":"20","C:\\Users\\rromi\\sensors-data\\src\\images\\Logout.js":"21","C:\\Users\\rromi\\sensors-data\\src\\images\\Share.js":"22","C:\\Users\\rromi\\sensors-data\\src\\components\\Clipboard\\index.js":"23"},{"size":314,"mtime":1611367014504,"results":"24","hashOfConfig":"25"},{"size":1400,"mtime":1612215327661,"results":"26","hashOfConfig":"25"},{"size":2197,"mtime":1612217733339,"results":"27","hashOfConfig":"25"},{"size":2337,"mtime":1612209740680,"results":"28","hashOfConfig":"25"},{"size":1113,"mtime":1611659948524,"results":"29","hashOfConfig":"25"},{"size":10497,"mtime":1612209686894,"results":"30","hashOfConfig":"25"},{"size":2859,"mtime":1612218400822,"results":"31","hashOfConfig":"25"},{"size":726,"mtime":1611606500578,"results":"32","hashOfConfig":"25"},{"size":636,"mtime":1611531862271,"results":"33","hashOfConfig":"25"},{"size":1680,"mtime":1611668843937,"results":"34","hashOfConfig":"25"},{"size":272,"mtime":1611503847509,"results":"35","hashOfConfig":"25"},{"size":814,"mtime":1612209562567,"results":"36","hashOfConfig":"25"},{"size":4704,"mtime":1612218647185,"results":"37","hashOfConfig":"25"},{"size":616,"mtime":1611521354849,"results":"38","hashOfConfig":"25"},{"size":709,"mtime":1611534163203,"results":"39","hashOfConfig":"25"},{"size":2363,"mtime":1611613504968,"results":"40","hashOfConfig":"25"},{"size":800,"mtime":1611620290365,"results":"41","hashOfConfig":"25"},{"size":875,"mtime":1611668289780,"results":"42","hashOfConfig":"25"},{"size":729,"mtime":1611619862712,"results":"43","hashOfConfig":"25"},{"size":197,"mtime":1611620099560,"results":"44","hashOfConfig":"25"},{"size":1164,"mtime":1612211153983,"results":"45","hashOfConfig":"25"},{"size":2146,"mtime":1612214628406,"results":"46","hashOfConfig":"25"},{"size":574,"mtime":1612217013503,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"vczyyt",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},"C:\\Users\\rromi\\sensors-data\\src\\index.js",[],["99","100"],"C:\\Users\\rromi\\sensors-data\\src\\App.js",["101"],"C:\\Users\\rromi\\sensors-data\\src\\components\\Map\\index.js",["102","103"],"import React, { useEffect } from \"react\";\r\nimport ReactMapboxGl, { Marker } from \"react-mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { withTheme } from \"styled-components\";\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: process.env.REACT_APP_MAP_ACCESS_TOKEN,\r\n});\r\n\r\nconst markerStyle = (color) => {\r\n  return {\r\n    pointerEvents: \"none\",\r\n    width: 30,\r\n    height: 30,\r\n    borderRadius: \"50%\",\r\n    border: \"4px solid white\",\r\n    background: color,\r\n    boxShadow: `0 0 0 1px ${color}`,\r\n  };\r\n};\r\n\r\nconst UserMarker = ({ color }) => {\r\n  return <div style={markerStyle(color)}></div>;\r\n};\r\n\r\nconst NotMyLocationMarker = ({ name, theme }) => {\r\n  return (\r\n    <div style={markerStyle(\"#2065ff\")}>\r\n      <div\r\n        style={{\r\n          color: \"#2065ff\",\r\n          position: \"absolute\",\r\n          fontWeight: \"bold\",\r\n          top: -23,\r\n          left: 0,\r\n          right: 0,\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        {name}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction isNumeric(str) {\r\n  if (typeof str != \"string\") return false;\r\n  return !isNaN(str) && !isNaN(parseFloat(str));\r\n}\r\n\r\nconst isNotMyLocationValid = (location) => {\r\n  if (location.length === 2 && isNumeric(location[0]) && isNumeric(location[1])) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst Component = ({ onReady, theme, userLocation, notMyLocation, notMyLocationName }) => {\r\n  return (\r\n    <Map\r\n      onStyleLoad={onReady}\r\n      style=\"mapbox://styles/mapbox/streets-v9\"\r\n      center={userLocation}\r\n      containerStyle={{\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      {isNotMyLocationValid(notMyLocation) && notMyLocationName && notMyLocationName.length < 30 && (\r\n        <Marker coordinates={notMyLocation.map((x) => +x)} style={{ pointerEvents: \"none\" }}>\r\n          <NotMyLocationMarker theme={theme} name={notMyLocationName}></NotMyLocationMarker>\r\n        </Marker>\r\n      )}\r\n\r\n      <Marker coordinates={userLocation} style={{ pointerEvents: \"none\" }}>\r\n        <UserMarker color={theme.danger}></UserMarker>\r\n      </Marker>\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default withTheme(Component);\r\n","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\index.js",["104"],"import React from \"react\";\r\nimport RealTimeChart from \"./Chart\";\r\nimport Figure from \"./Figure\";\r\nimport styled, { withTheme } from \"styled-components\";\r\n\r\nconst Title = styled.div`\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n  line-height: 24px;\r\n  color: ${(props) => props.theme.main};\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst colors = [\r\n  \"deeppink\",\r\n  \"deepskyblue\",\r\n  \"rebeccapurple\",\r\n  \"chocolate\",\r\n  \"orange\",\r\n  \"seagreen\",\r\n  \"slateblue\",\r\n  \"lawngreen\",\r\n];\r\n\r\nconst markStyle = (color) => {\r\n  return { width: 20, height: 7, borderRadius: 5, background: color, marginRight: 5 };\r\n};\r\n\r\nconst Sensor = ({\r\n  value,\r\n  characterValue,\r\n  characterValueLabels,\r\n  subject,\r\n  units,\r\n  range,\r\n  sendSensorData,\r\n  id,\r\n  graphView,\r\n  graphViewDisabled = false,\r\n  labels = [\"X-axis\", \"Y-axis\", \"Z-axis\"],\r\n  active,\r\n  keys,\r\n  theme,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        boxSizing: \"border-box\",\r\n        background: \"white\",\r\n        padding: \"1.5rem\",\r\n        borderRadius: \"8px\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Title>{subject}</Title>\r\n      {graphView && !graphViewDisabled && (\r\n        <div style={{ display: \"flex\", marginBottom: 15, marginTop: 25, flexWrap: \"wrap\" }}>\r\n          {keys.map((x, i) => (\r\n            <div\r\n              key={`${subject}-chart-label-${i}`}\r\n              style={{ display: \"flex\", alignItems: \"center\", marginRight: 5, marginBottom: 5 }}\r\n            >\r\n              <div style={markStyle(theme.chartColors[i])}></div>\r\n              <div style={{ marginRight: 4, lineHeight: \"14px\" }}>{x}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {graphView && !graphViewDisabled ? (\r\n        <RealTimeChart\r\n          id={id}\r\n          sendSensorData={sendSensorData}\r\n          value={value}\r\n          range={range}\r\n          subject={subject}\r\n          active={active}\r\n          keys={keys}\r\n          theme={theme}\r\n        ></RealTimeChart>\r\n      ) : (\r\n        <Figure value={value} labels={labels} units={units} subject={subject}></Figure>\r\n      )}\r\n      {characterValue && (\r\n        <Figure\r\n          characterValue\r\n          value={characterValue}\r\n          labels={characterValueLabels}\r\n          subject={subject}\r\n        ></Figure>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withTheme(Sensor);\r\n","C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\SensorsPanel\\index.js",["105","106","107","108","109","110"],"import React, { useCallback, useState, useRef, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Sensor from \"components/Sensor\";\r\nimport { SendSensorData } from \"api\";\r\nimport { Container, Row, Col } from \"styled-bootstrap-grid\";\r\nimport styled, { withTheme } from \"styled-components\";\r\nimport SensorIcon from \"images/Sensor\";\r\nimport { onDeviceMotion } from \"sensors/deviceMotion\";\r\nimport { onDeviceOrientation } from \"sensors/deviceOrientation\";\r\nimport { SubscribeGeolocation, UnsubscribeGeolocation } from \"sensors/geolocation\";\r\n\r\nconst SwitchButton = styled.div`\r\n  height: 33px;\r\n  width: 48px;\r\n  border-radius: 5px;\r\n  border: 1px solid ${(props) => props.theme.main};\r\n  background: ${(props) =>\r\n    props.active ? (props.theme.main ? props.theme.main : \"black\") : \"white\"};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst SensorsButton = ({\r\n  sensorsOn,\r\n  TurnSensorsOn,\r\n  TurnSensorsOff,\r\n  theme,\r\n  sensorsButtonRenderedOnce,\r\n  setSensorsButtonRenderedOnce,\r\n}) => {\r\n  const TurnOnOffButtonRef = useRef();\r\n  useEffect(() => {\r\n    if (!sensorsButtonRenderedOnce) {\r\n      TurnOnOffButtonRef.current.click();\r\n      setSensorsButtonRenderedOnce(true);\r\n    }\r\n  }, []);\r\n  return (\r\n    <SwitchButton\r\n      theme={theme}\r\n      ref={TurnOnOffButtonRef}\r\n      active={sensorsOn}\r\n      onClick={() => {\r\n        sensorsOn ? TurnSensorsOff() : TurnSensorsOn();\r\n      }}\r\n    >\r\n      <SensorIcon color={sensorsOn ? theme.secondary : theme.main}></SensorIcon>\r\n    </SwitchButton>\r\n  );\r\n};\r\n\r\nconst SensorsPanel = ({ graphView, sensorsOn, setSensorsOn, theme }) => {\r\n  const [orientation, setOrientation] = useState({ alpha: 0, beta: 0, gamma: 0 });\r\n  const [acceleration, setAcceleration] = useState({ x: 0, y: 0, z: 0 });\r\n  const [accelerationIncludingGravity, setAccelerationIncludingGravity] = useState({\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n  });\r\n  const [rotationRate, setRotationRate] = useState({ alpha: 0, beta: 0, gamma: 0 });\r\n  const [geoData, setGeoData] = useState({\r\n    latitude: 0,\r\n    longitude: 0,\r\n    accuracy: 0,\r\n    altitude: 0,\r\n    altitudeAccuracy: 0,\r\n    heading: 0,\r\n    speed: 0,\r\n  });\r\n\r\n  const lastLocationFetchTimestamp = useRef(0);\r\n  const timeGapBetweenLocationFetch = 20 * 1000; // miliseconds\r\n\r\n  const [location, setLocaton] = useState({ country: \"\", city: \"\" });\r\n\r\n  const [sensorsButtonRenderedOnce, setSensorsButtonRenderedOnce] = useState(false);\r\n\r\n  const onDeviceMotionAssigned = useCallback(\r\n    (e) => {\r\n      onDeviceMotion(e, { setAcceleration, setAccelerationIncludingGravity, setRotationRate });\r\n    },\r\n    [onDeviceMotion]\r\n  );\r\n\r\n  const onDeviceOrientationAssigned = useCallback(\r\n    (e) => {\r\n      onDeviceOrientation(e, { setOrientation });\r\n    },\r\n    [onDeviceOrientation]\r\n  );\r\n\r\n  const TurnSensorsOn = useCallback(async () => {\r\n    var ua = navigator.userAgent.toLowerCase();\r\n    let errorOccured = false;\r\n    if (ua.indexOf(\"safari\") !== -1) {\r\n      if (ua.indexOf(\"chrome\") > -1) {\r\n        window.addEventListener(\"devicemotion\", onDeviceMotionAssigned);\r\n        window.addEventListener(\"deviceorientation\", onDeviceOrientationAssigned);\r\n      } else {\r\n        if (\r\n          typeof DeviceMotionEvent !== \"undefined\" &&\r\n          typeof DeviceMotionEvent.requestPermission === \"function\"\r\n        ) {\r\n          let res = await DeviceMotionEvent.requestPermission()\r\n            .then((response) => {\r\n              if (response === \"granted\") {\r\n                window.addEventListener(\"devicemotion\", onDeviceMotionAssigned);\r\n                return \"success\";\r\n              } else {\r\n                return \"error\";\r\n              }\r\n            })\r\n            .catch((er) => {\r\n              return er.message;\r\n            });\r\n          if (res !== \"success\") {\r\n            errorOccured = true;\r\n          }\r\n        } else {\r\n          alert(\"DeviceMotion is not supported in this browser\");\r\n        }\r\n        if (\r\n          typeof DeviceOrientationEvent !== \"undefined\" &&\r\n          typeof DeviceOrientationEvent.requestPermission === \"function\"\r\n        ) {\r\n          let res = await DeviceOrientationEvent.requestPermission()\r\n            .then((response) => {\r\n              if (response === \"granted\") {\r\n                window.addEventListener(\"deviceorientation\", onDeviceOrientationAssigned);\r\n                return \"success\";\r\n              } else {\r\n                return \"error\";\r\n              }\r\n            })\r\n            .catch((er) => er.message);\r\n          if (res !== \"success\") {\r\n            errorOccured = true;\r\n          }\r\n        } else {\r\n          alert(\"DeviceOrientationEvent is not supported in this browser\");\r\n        }\r\n      }\r\n    }\r\n    if (!errorOccured) {\r\n      SubscribeGeolocation(\"geoData\", (val) => {\r\n        setGeoData((prev) =>\r\n          Object.assign({}, prev, {\r\n            latitude: val.latitude || 0,\r\n            longitude: val.longitude || 0,\r\n            accuracy: val.accuracy || 0,\r\n            altitude: val.altitude || 0,\r\n            altitudeAccuracy: val.altitudeAccuracy || 0,\r\n            heading: val.heading || 0,\r\n            speed: val.speed || 0,\r\n          })\r\n        );\r\n      });\r\n      setSensorsOn(true);\r\n    }\r\n  }, [onDeviceOrientationAssigned, onDeviceMotionAssigned]);\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n  const TurnSensorsOff = useCallback(() => {\r\n    window.removeEventListener(\"deviceorientation\", onDeviceOrientationAssigned);\r\n    window.removeEventListener(\"devicemotion\", onDeviceMotionAssigned);\r\n    UnsubscribeGeolocation(\"geoData\");\r\n    setSensorsOn(false);\r\n  }, [onDeviceOrientation, onDeviceMotion]);\r\n\r\n  useEffect(() => {\r\n    ReactDOM.render(\r\n      <SensorsButton\r\n        sensorsButtonRenderedOnce={sensorsButtonRenderedOnce}\r\n        setSensorsButtonRenderedOnce={setSensorsButtonRenderedOnce}\r\n        theme={theme}\r\n        sensorsOn={sensorsOn}\r\n        TurnSensorsOff={TurnSensorsOff}\r\n        TurnSensorsOn={TurnSensorsOn}\r\n      ></SensorsButton>,\r\n      document.getElementById(\"sensors-button\")\r\n    );\r\n  }, [sensorsOn, TurnSensorsOn, TurnSensorsOff, sensorsButtonRenderedOnce, theme]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      let res = await fetch(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${geoData.longitude},${geoData.latitude}.json?access_token=${process.env.REACT_APP_MAP_ACCESS_TOKEN}`\r\n      ).then((res) => res.json());\r\n      let region = res.features.find((x) => x.place_type.includes(\"region\"));\r\n      if (region) {\r\n        setLocaton((prev) => Object.assign({}, prev, { city: region.text }));\r\n      }\r\n      let country = res.features.find((x) => x.place_type.includes(\"country\"));\r\n      if (country) {\r\n        setLocaton((prev) => Object.assign({}, prev, { country: country.text }));\r\n      }\r\n    };\r\n\r\n    let timestamp = Date.now();\r\n\r\n    if (\r\n      timestamp - lastLocationFetchTimestamp.current >= timeGapBetweenLocationFetch &&\r\n      geoData.longitude !== 0 &&\r\n      geoData.latitude !== 0\r\n    ) {\r\n      getData();\r\n      lastLocationFetchTimestamp.current = timestamp;\r\n    }\r\n  }, [geoData]);\r\n\r\n  return (\r\n    <Container style={{ width: \"100%\", maxWidth: 1000, padding: \"10px 0 50px 0\" }}>\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            labels={[\"X-axis (β)\", \"Y-axis (γ)\", \"Z-axis (α)\"]}\r\n            graphView={graphView}\r\n            id=\"orientation\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-200, 380]}\r\n            units={\"°\"}\r\n            subject=\"Orientation\"\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n            value={{ x: orientation.beta, y: orientation.gamma, z: orientation.alpha }}\r\n          ></Sensor>\r\n        </Col>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"accelerometer\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-10, 10]}\r\n            subject=\"Accelerometer\"\r\n            value={acceleration}\r\n            units=\"m/s²\"\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n          ></Sensor>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"accelerometerIncludingGravity\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-30, 30]}\r\n            subject=\"Accelerometer including gravity\"\r\n            value={accelerationIncludingGravity}\r\n            units=\"m/s²\"\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n          ></Sensor>\r\n        </Col>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            id=\"gyroscope\"\r\n            sendSensorData={SendSensorData}\r\n            range={[-220, 220]}\r\n            subject=\"Gyroscope\"\r\n            value={{ x: rotationRate.beta, y: rotationRate.gamma, z: rotationRate.alpha }}\r\n            keys={[\"x\", \"y\", \"z\"]}\r\n          ></Sensor>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginLeft: 0, marginRight: 0 }}>\r\n        <Col col={12} md={6} style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n          <Sensor\r\n            active={sensorsOn}\r\n            graphView={graphView}\r\n            graphViewDisabled\r\n            characterValue={location}\r\n            id=\"geodata\"\r\n            sendSensorData={SendSensorData}\r\n            subject=\"Geodata\"\r\n            value={geoData}\r\n            keys={[\r\n              \"latitude\",\r\n              \"longitude\",\r\n              \"accuracy\",\r\n              \"altitude\",\r\n              \"altitude accuracy\",\r\n              \"heading\",\r\n              \"speed\",\r\n            ]}\r\n            labels={[\r\n              \"latitude\",\r\n              \"longitude\",\r\n              \"accuracy\",\r\n              \"altitude\",\r\n              \"altitude accuracy\",\r\n              \"heading\",\r\n              \"speed\",\r\n            ]}\r\n            characterValueLabels={[\"country\", \"city\"]}\r\n          ></Sensor>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTheme(SensorsPanel);\r\n","C:\\Users\\rromi\\sensors-data\\src\\components\\RequestEmailForm\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\api\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\helpers\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Chart\\sandbox.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Loader\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Sensor\\Figure\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\App\\index.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Graph.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Cursor.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Sensor.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\Geolocation.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\geolocation.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceMotion.js",[],"C:\\Users\\rromi\\sensors-data\\src\\sensors\\deviceOrientation.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Logout.js",[],"C:\\Users\\rromi\\sensors-data\\src\\images\\Share.js",[],"C:\\Users\\rromi\\sensors-data\\src\\components\\Clipboard\\index.js",["111"],"import ClipboardAPI from \"clipboard\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nexport function Clipboard({ children, urlToCopy, onCopy = () => {} }) {\r\n  const ref = useRef(null);\r\n\r\n  useEffect(\r\n    function () {\r\n      const clip = new ClipboardAPI(ref.current, {\r\n        text() {\r\n          return urlToCopy;\r\n        },\r\n      });\r\n\r\n      clip.on(\"success\", onCopy);\r\n      return () => clip.destroy();\r\n    },\r\n    [urlToCopy]\r\n  );\r\n\r\n  return (\r\n    <div ref={ref} onClick={(event) => event.stopPropagation()}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":27,"nodeType":"118","messageId":"119","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"117","line":1,"column":17,"nodeType":"118","messageId":"119","endLine":1,"endColumn":26},{"ruleId":"120","severity":1,"message":"121","line":63,"column":7,"nodeType":"122","endLine":63,"endColumn":48},{"ruleId":"116","severity":1,"message":"123","line":14,"column":7,"nodeType":"118","messageId":"119","endLine":14,"endColumn":13},{"ruleId":"124","severity":1,"message":"125","line":40,"column":6,"nodeType":"126","endLine":40,"endColumn":8,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":85,"column":5,"nodeType":"126","endLine":85,"endColumn":21,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":92,"column":5,"nodeType":"126","endLine":92,"endColumn":26,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"132","line":163,"column":6,"nodeType":"126","endLine":163,"endColumn":59,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"134","line":172,"column":6,"nodeType":"126","endLine":172,"endColumn":43,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"136","line":213,"column":6,"nodeType":"126","endLine":213,"endColumn":15,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"138","line":18,"column":5,"nodeType":"126","endLine":18,"endColumn":16,"suggestions":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react/style-prop-object","Style prop value must be an object","JSXAttribute","'colors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sensorsButtonRenderedOnce' and 'setSensorsButtonRenderedOnce'. Either include them or remove the dependency array. If 'setSensorsButtonRenderedOnce' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["142"],"React Hook useCallback has an unnecessary dependency: 'onDeviceMotion'. Either exclude it or remove the dependency array. Outer scope values like 'onDeviceMotion' aren't valid dependencies because mutating them doesn't re-render the component.",["143"],"React Hook useCallback has an unnecessary dependency: 'onDeviceOrientation'. Either exclude it or remove the dependency array. Outer scope values like 'onDeviceOrientation' aren't valid dependencies because mutating them doesn't re-render the component.",["144"],"React Hook useCallback has a missing dependency: 'setSensorsOn'. Either include it or remove the dependency array. If 'setSensorsOn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["145"],"React Hook useCallback has missing dependencies: 'onDeviceMotionAssigned', 'onDeviceOrientationAssigned', and 'setSensorsOn'. Either include them or remove the dependency array. Outer scope values like 'onDeviceOrientation' aren't valid dependencies because mutating them doesn't re-render the component.",["146"],"React Hook useEffect has a missing dependency: 'timeGapBetweenLocationFetch'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'onCopy'. Either include it or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"151","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [sensorsButtonRenderedOnce, setSensorsButtonRenderedOnce]",{"range":"162","text":"163"},"Update the dependencies array to be: []",{"range":"164","text":"165"},{"range":"166","text":"165"},"Update the dependencies array to be: [onDeviceMotionAssigned, onDeviceOrientationAssigned, setSensorsOn]",{"range":"167","text":"168"},"Update the dependencies array to be: [onDeviceOrientationAssigned, onDeviceMotionAssigned, setSensorsOn]",{"range":"169","text":"170"},"Update the dependencies array to be: [geoData, timeGapBetweenLocationFetch]",{"range":"171","text":"172"},"Update the dependencies array to be: [onCopy, urlToCopy]",{"range":"173","text":"174"},[1284,1286],"[sensorsButtonRenderedOnce, setSensorsButtonRenderedOnce]",[2690,2706],"[]",[2845,2866],[5321,5374],"[onDeviceMotionAssigned, onDeviceOrientationAssigned, setSensorsOn]",[5714,5751],"[onDeviceOrientationAssigned, onDeviceMotionAssigned, setSensorsOn]",[7226,7235],"[geoData, timeGapBetweenLocationFetch]",[436,447],"[onCopy, urlToCopy]"]